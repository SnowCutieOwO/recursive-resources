import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url "https://maven.enjarai.nl/releases"
    }
    maven {
        url "https://maven.enjarai.nl/mirrors"
    }

    maven {
        name "Terraformers Maven"
        url 'https://maven.terraformersmc.com'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modImplementation include("nl.enjarai:shared-resources-api:${project.shared_resources_version}")

    include modImplementation("nl.enjarai:cicada-lib:${project.cicada_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    annotationProcessor("com.github.LlamaLad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching("assets/*/lang/*.json") {
        filter(ReplaceContentFilter)
    }
}

class ReplaceContentFilter extends FilterReader {
    ReplaceContentFilter(Reader reader) {
        super(getJson(reader))
    }

    static Reader getJson(Reader reader) {
        def parsed = new JsonSlurper().parse(reader) as Map<String, ?>
        Map<String, String> map = new HashMap<>()
        flattenJsonMap(map, parsed, "")
        return new StringReader(new JsonBuilder(map).toPrettyString())
    }

    def static flattenJsonMap(Map<String, ?> outputMap, Object curElement, String keyPart) {
        if (curElement instanceof Map<String, ?>) {
            for (entry in curElement) {
                String key
                if (keyPart.length() == 0) key = entry.key
                else key = keyPart + "." + entry.key
                flattenJsonMap(outputMap, entry.value, key)
            }
        }
        else {
            outputMap.put(keyPart, curElement)
        }
    }
}

version = "$version+$minecraft_version"

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from "LICENSE"
}

loom {
	accessWidenerPath = file("src/main/resources/recursiveresources.accesswidener")
}

publishing {
    repositories {
        maven {
            name = "enjaraiMaven"
            url = "https://maven.enjarai.nl/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group
            artifactId = archivesBaseName
            version = project.version

            from components.java
        }
    }
}
